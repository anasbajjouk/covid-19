{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","images/image.png","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","label","text","map","info","i","key","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","URL","fetchData","country","a","changeableURL","axios","get","console","error","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","borderColor","fill","backgroundColor","barChart","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","App","state","fetchedData","setState","this","image","media","srcSet","coronaImage","src","alt","style","width","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCmEpJC,EA9DD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACrD,IAAKH,EACH,MAAO,aAST,OACE,yBAAKI,UAAWC,IAAOC,WACrB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UARhB,CACtB,CAAEC,MAAO,WAAYC,KAAM,sCAC3B,CAAED,MAAO,YAAaC,KAAM,sCAC5B,CAAED,MAAO,SAAUC,KAAM,wCAMJC,KAAI,SAACC,EAAMC,GAC1B,OACE,kBAACP,EAAA,EAAD,CACEQ,IAAKD,EAAI,IACTE,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJhB,UAAWiB,IACThB,IAAOiB,KACQ,aAAfT,EAAKH,MACDL,IAAOkB,SACQ,cAAfV,EAAKH,MACLL,IAAOJ,UACPI,IAAOH,SAGb,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3Cd,EAAKH,OAER,kBAACe,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IACiB,aAAfjB,EAAKH,MACDV,EAAU+B,MACK,cAAflB,EAAKH,MACLT,EAAU8B,MACV7B,EAAO6B,MAEbC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK/B,GAAYgC,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAASf,EAAKF,c,yBCxD5CyB,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJf,kBAUXG,IAAMC,IAAIF,GAVC,2BASnBzC,KAAQC,EATW,EASXA,UAAWC,EATA,EASAA,UAAWC,EATX,EASWA,OAAQC,EATnB,EASmBA,WATnB,kBAWd,CAAEH,YAAWC,YAAWC,SAAQC,eAXlB,kCAarBwC,QAAQC,MAAR,MAbqB,0DAAH,sDAiBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElBrC,EAFkB,EAElBA,KACF+C,EAAe/C,EAAKa,KAAI,SAACmC,GAAD,MAAgB,CAC5C/C,UAAW+C,EAAU/C,UAAUgD,MAC/B9C,OAAQ6C,EAAU7C,OAAO8C,MACzBC,KAAMF,EAAUG,eANQ,kBASnBJ,GATmB,gCAW1BH,QAAQC,MAAR,MAX0B,yDAAH,qDAedO,EAAc,uCAAG,8BAAAZ,EAAA,+EAEQE,IAAMC,IAAN,UAAaN,EAAb,eAFR,uBAEZgB,EAFY,EAElBrD,KAFkB,kBAGnBqD,EAAUA,UAAUxC,KAAI,SAAC0B,GAAD,OAAaA,EAAQe,SAH1B,gCAK1BV,QAAQC,MAAR,MAL0B,yDAAH,qD,yBC+BZU,EA7DD,SAAC,GAAyD,IAAD,IAAtDvD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAUoC,EAAc,EAAdA,QAAc,EACnCiB,mBAAS,IAD0B,mBAC9DR,EAD8D,KACnDS,EADmD,KAGrEC,qBAAU,YACM,uCAAG,sBAAAlB,EAAA,kEACfiB,EADe,SACIX,IADJ,6EAAH,qDAIda,KACC,IAEH,IAAMC,EAAYZ,EAAUa,OAC1B,kBAAC,IAAD,CACE7D,KAAM,CACJ8D,OAAQd,EAAUnC,KAAI,qBAAGqC,QACzBa,SAAU,CACR,CACE/D,KAAMgD,EAAUnC,KAAI,qBAAGZ,aACvBU,MAAO,WACPqD,YAAa,UACbC,MAAM,GAER,CACEjE,KAAMgD,EAAUnC,KAAI,qBAAGV,UACvBQ,MAAO,WACPqD,YAAa,MACbE,gBAAiB,oBACjBD,MAAM,OAKZ,KAEEE,EAAWlE,EACf,kBAAC,IAAD,CACED,KAAM,CACJ8D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACE/D,KAAM,CAACC,EAAU+B,MAAO9B,EAAU8B,MAAO7B,EAAO6B,OAChDrB,MAAO,SACPuD,gBAAiB,CACf,uBACA,uBACA,2BAKRE,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAM1D,KAAK,oBAAD,OAAsB2B,OAGpD,KACJ,OACE,yBAAKlC,UAAWC,IAAOC,WAAYgC,EAAU4B,EAAWP,I,mCC9B7CY,EA5BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACDjB,mBAAS,IADR,mBAC1CkB,EAD0C,KACxBC,EADwB,KAWjD,OARAjB,qBAAU,YACM,uCAAG,sBAAAlB,EAAA,kEACfmC,EADe,SACWvB,IADX,6EAAH,qDAIdO,KACC,CAACgB,IAGF,kBAACC,EAAA,EAAD,CAAavE,UAAWC,IAAOuE,aAC7B,kBAACC,EAAA,EAAD,CACEC,aAAa,GACbC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOlD,SAE9C,4BAAQA,MAAM,IAAd,UACC0C,EAAiB7D,KAAI,SAAC0B,EAASxB,GAAV,OACpB,4BAAQC,IAAKD,EAAI,GAAIiB,MAAOO,GACzBA,S,kCCmBE4C,E,4MArCbC,MAAQ,CACNpF,KAAM,GACNuC,QAAS,I,EAQXkC,oB,uCAAsB,WAAOlC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACd8C,EADc,OAEpB,EAAKC,SAAS,CAAEtF,KAAMqF,EAAa9C,YAFf,2C,wPAJMD,I,OAApB+C,E,OACNE,KAAKD,SAAS,CAAEtF,KAAMqF,I,qIAQd,IAAD,EACmBE,KAAKH,MAAvBpF,EADD,EACCA,KAAMuC,EADP,EACOA,QACd,OACE,yBAAKlC,UAAWC,IAAOC,WACrB,6BAASF,UAAWC,IAAOkF,OACzB,4BAAQC,MAAM,qBAAqBC,OAAQC,MAC3C,4BAAQF,MAAM,qBAAqBC,OAAQC,MAC3C,yBACEtF,UAAWC,IAAOkF,MAClBI,IAAKD,IACLE,IAAI,eACJC,MAAO,CAAEC,MAAO,WAGpB,kBAAC,EAAD,CAAO/F,KAAMA,IACb,kBAAC,EAAD,CAAeyE,oBAAqBc,KAAKd,sBACzC,kBAAC,EAAD,CAAOzE,KAAMA,EAAMuC,QAASA,U,GAhClByD,IAAMC,WCDxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,mBCR1BzG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCD7DD,EAAOC,QAAU,IAA0B,mC,mBCC3CD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC","file":"static/js/main.b53c1b61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3LnWB\",\"card\":\"Cards_card__1EPZL\",\"infected\":\"Cards_infected__3UnVL\",\"recovered\":\"Cards_recovered__1jgW8\",\"deaths\":\"Cards_deaths__1q_jQ\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...'\r\n  }\r\n\r\n  const covidInfoLabels = [\r\n    { label: 'Infected', text: 'Number of active cases of COVID-19' },\r\n    { label: 'Recovered', text: 'Number of recoveries from COVID-19' },\r\n    { label: 'Deaths', text: 'Number of deaths caused by COVID-19' },\r\n  ]\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        {covidInfoLabels.map((info, i) => {\r\n          return (\r\n            <Grid\r\n              key={i + 500}\r\n              item\r\n              component={Card}\r\n              xs={12}\r\n              md={3}\r\n              className={cx(\r\n                styles.card,\r\n                info.label === 'Infected'\r\n                  ? styles.infected\r\n                  : info.label === 'Recovered'\r\n                  ? styles.recovered\r\n                  : styles.deaths\r\n              )}\r\n            >\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                  {info.label}\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                  <CountUp\r\n                    start={0}\r\n                    end={\r\n                      info.label === 'Infected'\r\n                        ? confirmed.value\r\n                        : info.label === 'Recovered'\r\n                        ? recovered.value\r\n                        : deaths.value\r\n                    }\r\n                    duration={2.5}\r\n                    separator=\",\"\r\n                  />\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {new Date(lastUpdate).toDateString()}\r\n                </Typography>\r\n                <Typography variant=\"body2\">{info.text}</Typography>\r\n              </CardContent>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios'\r\n\r\nconst URL = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableURL = URL\r\n\r\n  if (country) {\r\n    changeableURL = `${URL}/countries/${country}`\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableURL)\r\n    return { confirmed, recovered, deaths, lastUpdate }\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${URL}/daily`)\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }))\r\n\r\n    return modifiedData\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: countries } = await axios.get(`${URL}/countries`)\r\n    return countries.countries.map((country) => country.name)\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData())\r\n    }\r\n\r\n    fetchAPI()\r\n  }, [])\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: 'Infected',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255,0,0,0.5)',\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [\r\n          {\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n            label: 'People',\r\n            backgroundColor: [\r\n              'rgba(0, 0, 255, 0.5)',\r\n              'rgba(0, 255, 0, 0.5)',\r\n              'rgba(255, 0, 0, 0.5)',\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport { fetchCountries } from '../../api'\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries())\r\n    }\r\n\r\n    fetchAPI()\r\n  }, [setFetchedCountries])\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i + 50} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react'\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css'\nimport { fetchData } from './api'\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData()\n    this.setState({ data: fetchedData })\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    this.setState({ data: fetchedData, country })\n  }\n\n  render() {\n    const { data, country } = this.state\n    return (\n      <div className={styles.container}>\n        <picture className={styles.image}>\n          <source media=\"(min-width: 650px)\" srcSet={coronaImage} />\n          <source media=\"(min-width: 465px)\" srcSet={coronaImage} />\n          <img\n            className={styles.image}\n            src={coronaImage}\n            alt=\"corona_image\"\n            style={{ width: 'auto' }}\n          />\n        </picture>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3SREN\",\"image\":\"App_image__ptCBT\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__BVBCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1a4u6\"};"],"sourceRoot":""}